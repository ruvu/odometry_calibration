#!/usr/bin/env python
"""
Calibrate odocmetry with data from a rosbag file
"""
from argparse import ArgumentParser

import numpy as np
import rosbag
import scipy.optimize
from ruvu_odometry_calibration.odometry_calibration import to_matrix, DataPoint, Parameters, loss
from ruvu_odometry_calibration.tf2_rosbag import BagBuffer
from tf.transformations import translation_from_matrix
from tf2_ros import ExtrapolationException


def load_data(bag):
    bag_transformer = BagBuffer(bag)

    data = []
    for _, msg, _ in bag.read_messages(topics=['/scan']):
        try:
            ground_truth = bag_transformer.lookup_transform('map', 'base_link', msg.header.stamp)
            measurement = bag_transformer.lookup_transform('odom', 'base_link', msg.header.stamp)
        except ExtrapolationException:
            continue
        ground_truth = to_matrix(ground_truth)
        measurement = to_matrix(measurement)
        data.append(DataPoint(timestamp=msg.header.stamp, ground_truth=ground_truth, measurement=measurement))

    print('loaded', len(data), 'data points')
    newdata = [data[0]]
    for d in data:
        if np.linalg.norm(
                translation_from_matrix(d.measurement) - translation_from_matrix(newdata[-1].measurement)) > 0.1:
            newdata.append(d)
    data = newdata
    # data = data[::5]
    print('using', len(data), 'data points')

    return data


def main(bagfile):
    print('Loading bagfile:', bagfile)
    with rosbag.Bag(bagfile) as bag:
        data = load_data(bag)

    def f(x):
        parameters = Parameters(x[0], x[1])
        errs = loss(data, parameters)
        print('err:', np.linalg.norm(errs), parameters)
        return np.ndarray.flatten(errs)

    bounds = (0.5, 2)
    result = scipy.optimize.least_squares(f, [1, 1], bounds=list(zip(bounds, bounds)))
    del result['fun']
    del result['jac']
    print(result)
    print('wheel_separation_multiplier', result.x[0])
    print('wheel_radius_multiplier', result.x[1])


if __name__ == '__main__':
    parser = ArgumentParser(description=__doc__)
    parser.add_argument('bagfile', help='input bagfile')

    args = parser.parse_args()
    main(**vars(args))
